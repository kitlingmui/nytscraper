{"version":3,"sources":["utils/API.js","pages/Stacks/Stacks.js","App.js","registerServiceWorker.js","index.js"],"names":["API","getArticles","axios","post","getsaveArticles","get","saveArticle","id","put","Stacks","state","stacks","summary","url","isSaved","pageName","displaysave","_this","setState","then","res","data","catch","err","console","log","displayscrape","_this2","this","react_default","a","createElement","Fragment","className","role","href","onClick","data-target","length","map","stack","key","_id","title","type","name","dataid","Component","App","pages_Stacks_Stacks","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ff65b6be.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default {\n\n  // Get Articles when onClick navbar scrape-btn\n  getArticles: function() {\n      return axios.post(\"/api/scrape\");\n  },\n  // Get Saved Articles when onClick navbar saved-btn \n  getsaveArticles: function() {\n      return axios.get(\"/api/saved\");\n  },\n  // save an articles\n  saveArticle: function(id){\n      return axios.put('/api/savearticle' + id)\n  }\n  \n};\n\n// Save and delete function to be fixed\n  // Gets all news\n  // getStacks: function() {\n  //   return axios.get(\"/api/stacks\");\n  // },\n  // // Gets the news with the given id\n  // getStacks: function(id) {\n  //   return axios.get(\"/api/stacks/\" + id);\n  // },\n  // // Deletes the news with the given id\n  // deleteStack: function(id) {\n  //   return axios.delete(\"/api/stacks/\" + id);\n  // },\n  // // Saves a news to the database\n  // saveStack: function(stackData) {\n  //   return axios.post(\"/api/stacks\", stackData);\n  // }\n\n","import React, { Component } from \"react\";\nimport API from \"../../utils/API\";\nimport './Stacks.css'\n\nclass Stacks extends Component {\n  // Setting our component's initial state\n  state = {\n    stacks: [],\n    summary: \"\",\n    url: \"\",\n    isSaved: false,\n    pageName: \"REACT SCRAPER\"\n  };\n\n\n  displaysave = () => {\n    this.setState( {pageName: \"SAVED ARTICLE\"} )\n    API.getsaveArticles()\n    .then(res => this.setState({ stacks: res.data }))\n    .catch(err => console.log(err))\n  }\n\n  displayscrape = () => {\n     this.setState( {pageName: \"REACT SCRAPER\"} )\n     API.getArticles()\n      .then(res => this.setState({ stacks: res.data }))\n      .catch(err => console.log(err))\n  }\n\n  saveArticle = id => {\n    console.log(id)\n    API.saveArticle(id)\n      .then(res => this.displaysave())\n      .catch(err => console.log(err))\n  }\n\n  render() {\n    return (\n          <>\n          <nav className=\"blue\" role=\"navigation\">\n                  <div className=\"nav-wrapper container\">\n                      <a id=\"logo-container\" href=\"#\" className=\"brand-logo\">React Scraper</a>\n                      <ul className=\"right hide-on-med-and-down\">\n                      <li><a href=\"/\">Home</a></li>\n                      <li><button onClick={() => this.displaysave()} className=\"waves-effect waves-light green btn-large\" id=\"saved-btn\">Saved Articles</button></li>\n                      <li><button onClick={() => this.displayscrape()} className=\"waves-effect waves-light red btn-large\" id=\"scrape-btn\">Scrape New Articles</button></li>\n                      </ul>\n              \n                      <ul id=\"nav-mobile\" className=\"sidenav\">\n                      <li><a href=\"#\">Navbar Link</a></li>\n                      </ul>\n                      <a href=\"#\" data-target=\"nav-mobile\" className=\"sidenav-trigger\"><i className=\"material-icons\">menu</i></a>\n                  </div>\n          </nav>\n\n          <div id=\"index-banner\" className=\"parallax-container\">\n              <div className=\"section no-pad-bot\">\n                  <div className=\"container\">\n                  <h1 className=\"header center teal-text text-lighten-2\">{this.state.pageName}</h1>\n                  <div className=\"row center\">\n                      <h5 className=\"header col s12 light\">NEW YORK TIMES EDITION</h5>\n                  </div>     \n                  </div>\n              </div>\n          </div>\n          <div className=\"orange lighten-3\" id=\"newscontainer\">\n              {this.state.stacks.length ? (\n                  <div className=\"row\">\n                      {\n                        this.state.stacks.map(stack => (                                            \n                            <div className=\"col s12\">\n                            <div className=\"card blue darken-1\">\n                                <div className=\"card-content white-text\" >                                                 \n                                    <span className=\"card-title\">\n                                    <div id=\"newstitle\" key={stack._id}>\n                                        {stack.title} \n                                        { (this.state.pageName === 'REACT SCRAPER') ? (\n                                          <button onClick={() => this.saveArticle(stack._id)} className=\"btn waves-effect waves-light\" id=\"save-article\" type=\"submit\" name=\"action\" dataid={stack._id}>Save</button>\n                                        ) : (\n                                          <button className=\"btn waves-effect waves-light\" id=\"delete-article\" type=\"submit\" name=\"action\" dataid={stack._id}>Delete</button>\n                                        )\n                                        }\n                                    </div>\n                                    </span>\n                                </div>\n                                <div className=\"card-action white\">\n                                    <p>{stack.summary}</p>\n                                    <a href={stack.url}>link to article</a>                              \n                                </div>                             \n                            </div>                             \n                            </div>                                               \n                          )\n                        )\n                    }   \n                </div>    \n              ) : (\n                <div>\n                {(this.state.pageName === 'REACT SCRAPER') ? (\n                    <p>Welcome to the page! Please scrape your article!</p>\n                  ) : (\n                    <p>No saved article found!</p>\n                  )\n                }\n                </div>\n              )}  \n          </div> \n        </>   \n    );\n  }\n}\n\nexport default Stacks ;\n","import React, { Component } from 'react'\nimport Stacks from \"./pages/Stacks\";\nimport './App.css'\n\nclass App extends Component {\n  render () {\n    return (\n      <div>\n        <Stacks />\n    </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register () {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}